// @ts-check

const paths = require('./paths');
const path = require('path');
const glob = require('glob');
const camelcase = require('camelcase');
const fs = require('fs');
const os = require('os');

function GenerateAssetModulesOnPreBuild() {}

GenerateAssetModulesOnPreBuild.prototype.apply = function(compiler) {
  if (compiler.isChild()) {
    return;
  }

  compiler.plugin('run', generateAssetModules);
  compiler.plugin('watch-run', generateAssetModules);
};

module.exports = GenerateAssetModulesOnPreBuild;

const generateAssetModules = (compiler, done) => {
  const files = glob.sync(path.join(paths.appSrc, 'assets', '**', '*.svg'));

  // converting all the image paths to relative to assets folder

  const groupedByFolder = groupBy(files, x => path.dirname(x));

  groupedByFolder.forEach((assets, folder) => {
    const content = [
      '// This file is automatically generated by GenerateAssetModulesOnPreBuild. Do not hand-edit.'
    ];

    for (let assetPath of assets) {
      const relative = path.relative(folder, assetPath);
      const fileName = path.basename(relative, path.extname(relative));

      const safeVariableName = `${camelcase(
        fileName.replace(/[^0-9a-z_]/gi, ' ')
      )}`;
      content.push(`import ${safeVariableName} from './${relative}';`);
      content.push(`export { ${safeVariableName} };`);
    }

    const modulePath = path.join(folder, 'index.ts');

    writeToFileIfChanged(modulePath, content.join('\n'));
  });

  done();
};

const groupBy = (list, keyGetter) => {
  const map = new Map();
  list.forEach(item => {
    const key = keyGetter(item);
    const collection = map.get(key);
    if (!collection) {
      map.set(key, [item]);
    } else {
      collection.push(item);
    }
  });
  return map;
};

const writeToFileIfChanged = (filename, content) => {
  //Replace new lines with the new lines from our git config
  content = content.replace(/\n/g, '\r\n') + '\r\n';

  if (fs.existsSync(filename)) {
    const currentInput = fs.readFileSync(filename, 'utf-8');

    if (currentInput !== content) {
      writeFile(filename, content);
    }
  } else {
    writeFile(filename, content);
  }
};

const writeFile = (filename, content) => {
  fs.writeFileSync(filename, content, 'utf8');
};
